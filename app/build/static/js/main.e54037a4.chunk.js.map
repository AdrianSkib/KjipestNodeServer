{"version":3,"sources":["img/bw/rain.svg","img/c/partlycloudy.svg","img/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","listRef","React","createRef","Row","index","style","state","flipList","data","length","id","className","location","kjipestScore","toFixed","src","require","alt","onSelect","value","selection","current","scrollToItem","setState","searchingFor","renderItem","item","renderMenu","items","_","autocompleteStyle","cellHeightCache","clearAll","rowHeight","height","rowCount","rowRenderer","key","parent","Item","cache","rowIndex","cloneElement","onMouseEnter","onMouseDown","e","button","props","onClick","width","minWidth","maxHeight","handleResize","main","document","getElementById","list","head","window","innerHeight","innerWidth","mobileWidth","CellMeasurerCache","defaultHeight","fixedWidth","gotData","currentLoc","currentIndex","currentScore","orderText","locData","hasPos","lat","lon","addEventListener","this","axios","get","response","dataWithId","map","currentItem","navigator","geolocation","getPosData","position","a","coords","longitude","latitude","locresponse","objWithId","find","o","getCurrentPosition","bind","display","flex","itemCount","itemSize","ref","itemData","toString","searchTerm","filter","toLowerCase","includes","getItemValue","onChange","inputProps","placeholder","KjipestList","getLocalScore","getLocalPercentage","type","isMobile","console","log","renderMobilePage","renderPage","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e54037a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.701bc143.svg\";","module.exports = __webpack_public_path__ + \"static/media/partlycloudy.aa3b800f.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.617bcacd.svg\";","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport {FixedSizeList} from \"react-window\";\r\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized';\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport \"react-virtualized/styles.css\";\r\nimport Autocomplete from 'react-autocomplete'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.cellHeightCache = new CellMeasurerCache({\r\n      defaultHeight: 42,\r\n      fixedWidth: true\r\n    })\r\n    this.state = {\r\n      data: [],\r\n      searchingFor: '',\r\n      gotData: false,\r\n      currentLoc: \"Laster din posisjon\",\r\n      currentIndex: -1,\r\n      currentScore: -1,\r\n      flipList: false,\r\n      orderText: \"Kjipest – Minst kjipt ↓\",\r\n      locData: {},\r\n      hasPos: false,\r\n      lat: \"\",\r\n      lon: \"\",\r\n      width: window.innerWidth,\r\n      mobileWidth: 1000 \r\n    };\r\n  }\r\n  listRef = React.createRef();\r\n\r\n  async componentDidMount() {\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n    // const response = await axios.get(\"http://84.214.69.73:8888/\");\r\n    // const response = await axios.get(\"https://kjipest.no/sorted\");\r\n    const response = await axios.get(\"http://kjipestnodeserver.azurewebsites.net/sorted\");\r\n    const data = await response.data;\r\n    const dataWithId = data.map((currentItem, index) => {currentItem.index = index; return(currentItem)})\r\n    this.setState({ data: dataWithId, gotData: true});\r\n    const { width } = this.state;\r\n    const isMobile = width <= this.state.mobileWidth;\r\n\r\n    if (isMobile){}\r\n    else{\r\n      var main = document.getElementById(\"main\");\r\n      main.style.height = window.innerHeight - 160 + \"px\";\r\n      var list = document.getElementById(\"list\");\r\n      list.style.width = window.innerWidth - 300 + \"px\";\r\n      var head = document.getElementById(\"categories\");\r\n      head.style.width = window.innerWidth - 300 + \"px\";\r\n    }\r\n      if (navigator.geolocation) {\r\n        async function getPosData(position){\r\n          // const locresponse = await axios.get(\"http://84.214.69.73:8888/lonlat/\" + position.coords.longitude + \"&\" + position.coords.latitude);\r\n          // const locresponse = await axios.get(\"https://kjipest.no/lonlat/\" + position.coords.longitude + \"&\" + position.coords.latitude);\r\n          const locresponse = await axios.get(\"http://kjipestnodeserver.azurewebsites.net/lonlat/\" + position.coords.longitude + \"&\" + position.coords.latitude);\r\n          const locData = await locresponse.data;\r\n          let objWithId = dataWithId.find(o => o.location === locData.location);\r\n          this.setState({ locData: locData, \r\n                          currentLoc: locData.location, currentIndex: objWithId.index, currentScore: locData.kjipestScore});\r\n          this.setState({lat: position.coords.latitude, lon: position.coords.longitude, hasPos: true});\r\n          };\r\n        await navigator.geolocation.getCurrentPosition(getPosData.bind(this));\r\n      }\r\n    \r\n  }\r\n  async componentWillUnmount() {\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  }\r\n\r\n  Row = ({ index, style }) => {\r\n    // If someone can make this not need weird logic for index = this.state.data.length, then I'll love you forever.\r\n    if (this.state.flipList){\r\n      if (this.state.data.length -index-3 > 0 ) {\r\n        index = this.state.data.length-index-3;}\r\n      else {\r\n        index = 0;\r\n      }}\r\n    return (\r\n    <div id=\"listelement\" style={style}>\r\n      <div className=\"elementelement\" id=\"rank\">\r\n        {index+1}\r\n      </div>\r\n      <div className=\"elementelement\" id=\"location\">\r\n        {this.state.data[index].location}\r\n      </div>\r\n      <div className=\"elementelement\" id=\"score\">\r\n        {this.state.data[index].kjipestScore.toFixed(2)}\r\n      </div>\r\n      <div className=\"elementelement\" id=\"icon\">\r\n        <img src={require(\"./img/bw/rain.svg\")} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  )};\r\n\r\n  KjipestList() {\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <div style={{ flex: \"1 1 auto\", height: \"100vh\" }}>\r\n          <AutoSizer >\r\n            {({ height, width }) => (\r\n              <FixedSizeList\r\n                className=\"List\"\r\n                height={height}\r\n                itemCount={this.state.data.length}\r\n                itemSize={70}\r\n                width={width}\r\n                ref={this.listRef}\r\n                itemData={this.state.flipList}\r\n              >\r\n                {this.Row}\r\n              </FixedSizeList>\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  onSelect = (value, selection) => {\r\n    if (this.state.flipList){\r\n      this.listRef.current.scrollToItem(this.state.data.length - selection.index - 3, \"start\");\r\n    } else{\r\n      this.listRef.current.scrollToItem(selection.index, \"start\");\r\n    }              \r\n    this.setState({searchingFor: value});}\r\n\r\n  renderItem = (item) => {\r\n    return <div className='searchItem'>{item.location}</div>\r\n  }\r\n\r\n  renderMenu = (items, _, autocompleteStyle) => {\r\n    this.cellHeightCache.clearAll()\r\n    const rowRenderer = ({key, index, parent, style}) => {\r\n      const Item = items[index]\r\n      const onMouseDown = e => {\r\n        if(e.button === 0) {\r\n          Item.props.onClick(e)\r\n        }\r\n      }\r\n      return (\r\n        <CellMeasurer\r\n          cache={this.cellHeightCache}\r\n          key={key}\r\n          parent={parent}\r\n          rowIndex={index}\r\n        >\r\n          {React.cloneElement(Item, {\r\n            style: style, \r\n            key: key, \r\n            onMouseEnter: null, \r\n            onMouseDown: onMouseDown\r\n          })}\r\n        </CellMeasurer>\r\n      )\r\n    }\r\n    return (\r\n      <List\r\n        rowHeight={this.cellHeightCache.rowHeight}\r\n        height={207}\r\n        rowCount={items.length}\r\n        rowRenderer={rowRenderer}\r\n        width={autocompleteStyle.minWidth || 0}\r\n        style={{\r\n          //...customStyles,\r\n          height: 'auto',\r\n          maxHeight: '207px'\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  getLocalScore(){\r\n    if (this.state.currentScore < 0){\r\n      return \"__\"\r\n    }else{\r\n      return this.state.currentScore.toFixed(2)\r\n    }\r\n  }\r\n\r\n  getLocalPercentage(){\r\n    if (this.state.currentScore < 0){\r\n      return (\"__\")\r\n    }else{\r\n      return ((this.state.currentIndex/this.state.data.length*100).toFixed(1).toString() + \" %\")\r\n    }\r\n  }\r\n\r\n  renderPage() {\r\n    const searchTerm = this.state.searchingFor;\r\n    let data = searchTerm \r\n      ? this.state.data.filter(item =>\r\n          item.location.toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n      : []\r\n    return (\r\n      <div>\r\n        <div>\r\n          <nav>\r\n            <div className=\"nav\" id=\"search\">\r\n              {/* <input type=\"search\" name=\"search\" placeholder=\"søk\" value=\"\" /> */}\r\n              <Autocomplete\r\n                items={data}\r\n                value={this.state.searchingFor}\r\n                \r\n                renderItem={this.renderItem}\r\n                renderMenu={this.renderMenu}\r\n                \r\n                getItemValue={ item => item.location }\r\n                onChange={(e, value)=> this.setState({searchingFor: value})}\r\n                onSelect={this.onSelect}\r\n                inputProps={{ placeholder: 'søk' }}\r\n              />\r\n            </div>\r\n            <div className=\"nav\" id=\"navlist\">\r\n              <h2>Liste</h2>\r\n            </div>\r\n            <div className=\"nav\">\r\n              <h2>Kart</h2>\r\n            </div>\r\n            <div className=\"nav\">\r\n              <h2>Info</h2>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"subheader\">\r\n          <div id=\"categories\">\r\n            <div className=\"head\" id=\"crank\">\r\n              <h3>Rangering</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cloc\">\r\n              <h3 >Sted</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cscore\">\r\n              <h3 onClick={() => {\r\n                                  if (this.state.flipList){\r\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↓\" ,\r\n                                                    flipList: false});\r\n                                    this.listRef.current.scrollToItem(0, \"start\");\r\n                                  } else {\r\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↑\" ,\r\n                                                    flipList: true});\r\n                                    this.listRef.current.scrollToItem(0, \"start\");\r\n                                  }}}>\r\n      {this.state.orderText}</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cicon\">\r\n              <h3>Værtyper</h3>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"locName\">\r\n            <p>{this.state.currentLoc}</p>\r\n            <h3>(Din posisjon)</h3>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"main\">\r\n          <div id=\"list\">{this.KjipestList()}</div>\r\n          <div className=\"sidebar\" >\r\n            <div className=\"localinfo\">\r\n              <div id=\"localscore\">\r\n                <h3>Score:</h3>\r\n                <h1>\r\n                  {this.getLocalScore()}\r\n                </h1>\r\n              </div>\r\n              <img src={require(\"./img/c/partlycloudy.svg\")} alt=\"\" />\r\n              <div className=\"localrank\">\r\n                {/* <h3 className=\"localpercentage\">Topp</h3> */}\r\n                <h1 className=\"localpercentage\">\r\n                  {this.getLocalPercentage()}\r\n                </h1>\r\n                <h3 className=\"localpercentagebottom\">av Norge har det kjipere enn deg</h3>\r\n              </div>\r\n            </div>\r\n            <div className=\"logo\">\r\n              <img src={require(\"./img/logo.svg\")} alt=\"\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <script type=\"text/javascript\" src=\"./script.js\" />\r\n      </div>\r\n    );\r\n  }\r\n  renderMobilePage(){\r\n    const searchTerm = this.state.searchingFor;\r\n    let data = searchTerm \r\n      ? this.state.data.filter(item =>\r\n          item.location.toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n      : []\r\n    return (\r\n      <div>\r\n        <div>\r\n          <nav>\r\n            <div className=\"nav\" id=\"search\">\r\n              {/* <input type=\"search\" name=\"search\" placeholder=\"søk\" value=\"\" /> */}\r\n              <Autocomplete\r\n                items={data}\r\n                value={this.state.searchingFor}\r\n                \r\n                renderItem={this.renderItem}\r\n                renderMenu={this.renderMenu}\r\n                \r\n                getItemValue={ item => item.location }\r\n                onChange={(e, value)=> this.setState({searchingFor: value})}\r\n                onSelect={this.onSelect}\r\n                inputProps={{ placeholder: 'søk' }}\r\n              />\r\n            </div>\r\n            <div className=\"nav\" id=\"navlist\">\r\n              <h2>Liste</h2>\r\n            </div>\r\n            <div className=\"nav\">\r\n              <h2>Deg</h2>\r\n            </div>\r\n            <div className=\"nav\">\r\n              <h2>Kart</h2>\r\n            </div>\r\n            <div className=\"nav\">\r\n              <h2>Info</h2>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"subheader\">\r\n          <div id=\"categories\">\r\n            <div className=\"head\" id=\"crank\" >\r\n              <h3>Rangering</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cloc\" >\r\n              <h3>Sted</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cscore\" >\r\n              <h3 onClick={() => {\r\n                                  if (this.state.flipList){\r\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↓\" ,\r\n                                                    flipList: false});\r\n                                    this.listRef.current.scrollToItem(0, \"start\");\r\n                                  } else {\r\n                                    this.setState({ orderText: \"Kjipest – Minst kjipt ↑\" ,\r\n                                                    flipList: true});\r\n                                    this.listRef.current.scrollToItem(0, \"start\");\r\n                                  }}}>\r\n      {this.state.orderText}</h3>\r\n            </div>\r\n            <div className=\"head\" id=\"cicon\">\r\n              <h3>Værtyper</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"main\">\r\n          <div id=\"list\" style={{width:\"100%\"}}>{this.KjipestList()}</div>\r\n        </div>\r\n        <script type=\"text/javascript\" src=\"./script.js\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  handleResize = (e) => {\r\n    var main = document.getElementById(\"main\");\r\n    var list = document.getElementById(\"list\");\r\n    var head = document.getElementById(\"categories\");\r\n    var crank = document.getElementById(\"crank\");\r\n    var cloc = document.getElementById(\"cloc\");\r\n    var cscore = document.getElementById(\"cscore\");\r\n    var cicon = document.getElementById(\"cicon\");\r\n    main.style.height = window.innerHeight - 160 + \"px\";\r\n    list.style.width = window.innerWidth - 300 + \"px\";\r\n    head.style.width = window.innerWidth - 300 + \"px\";\r\n    if (window.innerWidth <= this.state.mobileWidth){\r\n      list.style.width = \"100%\";\r\n      head.style.width = \"100%\";\r\n    }\r\n    this.setState({ width: window.innerWidth });\r\n   };\r\n\r\n  render() {\r\n    const { width } = this.state;\r\n    const isMobile = width <= this.state.mobileWidth;\r\n    console.log(width)\r\n    if (isMobile){\r\n      if (this.state.gotData) {}\r\n      else {}\r\n      return <div>{this.renderMobilePage()}</div>\r\n    } else{\r\n      if (this.state.gotData) {\r\n        return <div>{this.renderPage()}</div>;\r\n      }\r\n      else {\r\n        return <div></div>;\r\n      }\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}